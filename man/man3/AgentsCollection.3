.TH "AgentsCollection" 3 "Thu Nov 21 2019" "Simulator" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AgentsCollection
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AgentsCollection\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAgentsCollection\fP ()"
.br
.ti -1c
.RI "virtual \fB~AgentsCollection\fP ()"
.br
.ti -1c
.RI "void \fBaddAgent\fP (\fBAgent\fP *a)"
.br
.ti -1c
.RI "\fBAgent\fP * \fBdeleteAgent\fP (\fBAgent\fP *a)"
.br
.ti -1c
.RI "\fBAgent\fP * \fBgetAgent\fP (const unsigned long id) const"
.br
.ti -1c
.RI "pair< \fBum_iterator\fP, \fBum_iterator\fP > \fBgetAgentListByType\fP (const string &agentType)"
.br
.ti -1c
.RI "\fBum_iterator\fP \fBend\fP ()"
.br
.ti -1c
.RI "\fBum_iterator\fP \fBbegin\fP ()"
.br
.ti -1c
.RI "unsigned long \fBsize\fP ()"
.br
.ti -1c
.RI "void \fBprintAgents\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unordered_multimap< string, \fBAgent\fP * > \fBm_agents\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is actually a container for all the agents used for simulation\&. An agent could be an object of one the the derived classes of \fBAgent\fP\&. The Agents are kept in an unordered_multimap as pairs <string, Agent*> where the first element of the pair is the name of the concrete agent (a person, a mobile device, an antenna, a mno, etc\&.) and the second element is a pointer to the actual object (agent)\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AgentsCollection::AgentsCollection ()"
The default constructor of the class\&. 
.SS "virtual AgentsCollection::~AgentsCollection ()\fC [virtual]\fP"
Default destructor: it iterates through the collection of agents and frees the memory allocated for each agent in the collection\&. 
.SH "Member Function Documentation"
.PP 
.SS "void AgentsCollection::addAgent (\fBAgent\fP * a)"
Adds a new \fBAgent\fP to the collection\&. For performance reasons the \fBAgentsCollection\fP class keep only a pointer to actual agents (objects)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP a pointer to the object (one of the derived classes of the \fBAgent\fP) to be added to the collection\&. 
.RE
.PP

.SS "\fBum_iterator\fP AgentsCollection::begin ()"
Iterator to the first agent of the container\&. 
.PP
\fBReturns:\fP
.RS 4
a random access iterator pointing to the first element (agent) in the container\&. If the container is empty, the returned iterator value shall not be dereferenced\&. 
.RE
.PP

.SS "\fBAgent\fP* AgentsCollection::deleteAgent (\fBAgent\fP * a)"
Removes an object from the collection\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP a pointer to the object to be removed from the collection\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.SS "\fBum_iterator\fP AgentsCollection::end ()"
Iterator to the past-the-end of the collection\&. It does not point to any agent, and thus shall not be dereferenced\&. 
.PP
\fBReturns:\fP
.RS 4
an iterator referring to the past-the-end element in the agents container\&. If the container is empty, this function returns the same as AgentsColletion::begin()\&. 
.RE
.PP

.SS "\fBAgent\fP* AgentsCollection::getAgent (const unsigned long id) const"
Returns a pointer to an agent from the collection\&. The agent/object is identified by its id\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP the id of the agent to be returned\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a pointer to the agent with the id equal to the parameter id\&. If there is no agent with the provided id, this method returns nullptr\&. 
.RE
.PP

.SS "pair<\fBum_iterator\fP, \fBum_iterator\fP> AgentsCollection::getAgentListByType (const string & agentType)"
This method is used to get a subset with a certain type of agents: persons, mobile phones etc\&. 
.PP
\fBParameters:\fP
.RS 4
\fIagentType\fP is the name of the class of agents that the user wants to retrieve from the collection of all agents\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
a std::pair of iterators of type unordered_multimap<string, Agent*>::iterator that can be used to iterate through to subset of the agents\&. 
.RE
.PP

.SS "void AgentsCollection::printAgents ()"
Print out all agents in the collection\&. 
.SS "unsigned long AgentsCollection::size ()"

.PP
\fBReturns:\fP
.RS 4
the number of elements in the container\&. This is the number of actual objects held in the container, which is not necessarily equal to its storage capacity\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "unordered_multimap<string, \fBAgent\fP*> AgentsCollection::m_agents\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Simulator from the source code\&.
